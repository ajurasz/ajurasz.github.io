{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020-04-12-continuous-deployment-on-kubernetes/","result":{"data":{"site":{"siteMetadata":{"title":"Dev Blog","author":"Arek Jurasz"}},"markdownRemark":{"id":"30d49a5b-d2b9-5297-9f40-95bc48df2bf7","html":"<p>If you are wondering how could you set up your build pipeline to do a deployment of your application to Kubernetes cluster then you can find this post interesting.</p>\n<!-- end -->\n<h2>Disclaimer</h2>\n<p>Everything that will be presented in this blog post was only used for Test and QA environments as a way to learn more about Kubernetes. It was not used for Prod environment yet so please keep this in your mind.</p>\n<h2>Stack</h2>\n<p>Before moving to details it’s worth mentioning what I have to disposal:</p>\n<ul>\n<li>Kubernetes cluster</li>\n<li>Jenkins pipeline job</li>\n<li>Private Docker registry</li>\n<li>Dockerized application</li>\n</ul>\n<h2>Build</h2>\n<p>Since Jenkins pipeline job is in place then the deployment is as easy as adding a new stage to an existing job pipeline. I have called mine <code class=\"language-text\">Deploy</code>. This stage is responsible for the following:</p>\n<ul>\n<li>run only on <code class=\"language-text\">develop</code> branch</li>\n<li>build docker image</li>\n<li>push the docker image to a repository</li>\n<li>call <a href=\"https://jenkins.io/doc/pipeline/steps/kubernetes-cd/#kubernetes-continuous-deploy-plugin\">Kubernetes Continuous Deploy Plugin</a></li>\n<li>remove docker image from Jenkins worker (just to save space)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pipeline {\n    stages {\n        stage(&#39;Deploy&#39;) {\n            when {\n                branch &quot;develop&quot;\n            }\n\n            environment {\n                DOCKER_REPOSITORY = &#39;127.0.0.1:5000&#39;\n                IMAGE_NAME = &#39;app&#39;\n                IMAGE_TAG = sh(script: &quot;git log -1 --pretty=%h&quot;undefined returnStdout: true).trim()\n                APP_IMAGE = &quot;${DOCKER_REPOSITORY}/${IMAGE_NAME}:${IMAGE_TAG}&quot;\n            }\n\n            steps {\n                sh &quot;&quot;&quot;\n                docker build -t ${APP_IMAGE} ./docker\n                &quot;&quot;&quot;\n\n                sh &quot;&quot;&quot;\n                docker push ${APP_IMAGE}\n                &quot;&quot;&quot;\n\n                kubernetesDeploy(kubeconfigId: &#39;k8s-config&#39;undefined configs: &#39;**/k8s/qa/app.yml&#39;)\n            }\n\n            post {\n                always {\n                    sh &quot;&quot;&quot;\n                    docker rmi ${APP_IMAGE}\n                    &quot;&quot;&quot;\n                }\n            }\n        }\n    }\n}</code></pre></div>\n<p>In the above snippet, there are two important things to notice. First is the registration of environment variable with name <code class=\"language-text\">APP_IMAGE</code>. The second most important thing is that kubernetes-cd plugin can substitute variables in the form of <code class=\"language-text\">${APP_IMAGE}</code> in the configuration file (<code class=\"language-text\">app.yml</code>) with variables from Jenkins environment. This is the default behaviour of the plugin and can be disabled with <code class=\"language-text\">enableConfigSubstitution</code> set to <code class=\"language-text\">false</code>.</p>\n<p>Kubernetes configuration consists of the standard objects needed for deploying an application to the cluster</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: app-qa\n  labels:\n    app: app-qa\n    env: qa\nspec:\n  replicas: 1\n  revisionHistoryLimit: 1\n  selector:\n    matchLabels:\n      app: app-qa\n      env: qa\n  template:\n    metadata:\n      labels:\n        app: app-qa\n        env: qa\n    spec:\n      containers:\n        - name: app-qa\n          image: ${APP_IMAGE}\n          imagePullPolicy: &quot;IfNotPresent&quot;\n          ports:\n            - containerPort: 8080\n          env:\n            - name: SPRING_PROFILES_ACTIVE\n              value: qa\n          resources:\n            limits:\n              cpu: 500m\n              memory: 256Mi\n            requests:\n              cpu: 500m\n              memory: 256Mi\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: app-qa\n  labels:\n    app: app-qa\n    env: qa\nspec:\n  type: NodePort\n  ports:\n    - port: 8080\n      nodePort: 31000\n  selector:\n    app: app-qa\n    env: qa</code></pre></div>\n<p>When the above configuration is applied then Kubernetes only updates these object that did change. So in case of successive deployment, only <code class=\"language-text\">Deployment</code> object is updated which represents our application. <code class=\"language-text\">revisionHistoryLimit</code> is an extra configuration which keeps previous <code class=\"language-text\">Deployment</code> object just in case if rollback is necessary.</p>","frontmatter":{"title":"Continuous Deployment on Kubernetes","date":"April 12, 2020"}}},"pageContext":{"slug":"/2020-04-12-continuous-deployment-on-kubernetes/","previous":{"fields":{"slug":"/2019-12-28-accessing-request-data-from-outside-of-calling-thread/"},"html":"<p>It’s almost end of 2019 but there is still a lot of application which depends on Servlet specification - this statement is base on my personal experience where I still see the majority of a new application being built using this technology. In this blog post, I will focus on a single use case where we will retrieve HTTP request data from outside of calling thread in <code class=\"language-text\">Spring Framework</code>.</p>\n<!-- end -->\n<h2>Problem</h2>\n<p>When using <code class=\"language-text\">spring-webmvc</code> in a standard way - according to Servlet 2.5 specification - then every incoming request is bound to a single thread for a life of that request (calling thread). Everything is fine until you start to do some <em>side processing in child thread</em>. This is a common case when moving to less coupled communicating between modules in an application through Spring’s event bus. </p>\n<p>Let’s consider the following scenario:</p>\n<ol>\n<li>Rest controller calls service</li>\n<li>Service publish event </li>\n<li>Event is processed by the listener in a new thread</li>\n<li>The listener uses a service which at some point - in execution chain - requires data from the HTTP request</li>\n</ol>\n<p>Output from above scenario will be sucessfull response to the client from rest controller and exception in logs saying that we try to access request attributes outside of an actual web request i.e:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive this message, your code is probably running outside of DispatcherServlet: In this case, use RequestContextListener or RequestContextFilter to expose the current request.\n\tat org.springframework.web.context.request.RequestContextHolder.currentRequestAttributes<span class=\"token punctuation\">(</span>RequestContextHolder.java:131<span class=\"token punctuation\">)</span> ~<span class=\"token punctuation\">[</span>spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE<span class=\"token punctuation\">]</span>\n\tat org.springframework.web.context.support.WebApplicationContextUtils.currentRequestAttributes<span class=\"token punctuation\">(</span>WebApplicationContextUtils.java:313<span class=\"token punctuation\">)</span> ~<span class=\"token punctuation\">[</span>spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE<span class=\"token punctuation\">]</span>\n\tat org.springframework.web.context.support.WebApplicationContextUtils.access<span class=\"token variable\">$400</span><span class=\"token punctuation\">(</span>WebApplicationContextUtils.java:66<span class=\"token punctuation\">)</span> ~<span class=\"token punctuation\">[</span>spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE<span class=\"token punctuation\">]</span>\n\tat org.springframework.web.context.support.WebApplicationContextUtils<span class=\"token variable\">$RequestObjectFactory</span>.getObject<span class=\"token punctuation\">(</span>WebApplicationContextUtils.java:329<span class=\"token punctuation\">)</span> ~<span class=\"token punctuation\">[</span>spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE<span class=\"token punctuation\">]</span>\n\tat org.springframework.web.context.support.WebApplicationContextUtils<span class=\"token variable\">$RequestObjectFactory</span>.getObject<span class=\"token punctuation\">(</span>WebApplicationContextUtils.java:324<span class=\"token punctuation\">)</span> ~<span class=\"token punctuation\">[</span>spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE<span class=\"token punctuation\">]</span>\n\tat org.springframework.beans.factory.support.AutowireUtils<span class=\"token variable\">$ObjectFactoryDelegatingInvocationHandler</span>.invoke<span class=\"token punctuation\">(</span>AutowireUtils.java:295<span class=\"token punctuation\">)</span> ~<span class=\"token punctuation\">[</span>spring-beans-5.2.2.RELEASE.jar:5.2.2.RELEASE<span class=\"token punctuation\">]</span>\n\tat com.sun.proxy.<span class=\"token variable\">$Proxy59</span>.getHeader<span class=\"token punctuation\">(</span>Unknown Source<span class=\"token punctuation\">)</span> ~<span class=\"token punctuation\">[</span>na:na<span class=\"token punctuation\">]</span>\n\tat io.github.ajurasz.demo.GetUserId.userId<span class=\"token punctuation\">(</span>GetUserId.java:18<span class=\"token punctuation\">)</span> ~<span class=\"token punctuation\">[</span>classes/:na<span class=\"token punctuation\">]</span>\n\tat io.github.ajurasz.demo.MyEventListener.handleEvent<span class=\"token punctuation\">(</span>MyEventListener.java:28<span class=\"token punctuation\">)</span> ~<span class=\"token punctuation\">[</span>classes/:na<span class=\"token punctuation\">]</span>\n\tat io.github.ajurasz.demo.MyEventListener.handle<span class=\"token punctuation\">(</span>MyEventListener.java:23<span class=\"token punctuation\">)</span> ~<span class=\"token punctuation\">[</span>classes/:na<span class=\"token punctuation\">]</span>\n\tat io.github.ajurasz.demo.MyEventListener<span class=\"token variable\">$$</span>FastClassBySpringCGLIB<span class=\"token variable\">$$</span>e876a886.invoke<span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>generated<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> ~<span class=\"token punctuation\">[</span>classes/:na<span class=\"token punctuation\">]</span>\n\tat org.springframework.cglib.proxy.MethodProxy.invoke<span class=\"token punctuation\">(</span>MethodProxy.java:218<span class=\"token punctuation\">)</span> ~<span class=\"token punctuation\">[</span>spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE<span class=\"token punctuation\">]</span>\n\tat org.springframework.aop.framework.CglibAopProxy<span class=\"token variable\">$CglibMethodInvocation</span>.invokeJoinpoint<span class=\"token punctuation\">(</span>CglibAopProxy.java:769<span class=\"token punctuation\">)</span> ~<span class=\"token punctuation\">[</span>spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE<span class=\"token punctuation\">]</span>\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed<span class=\"token punctuation\">(</span>ReflectiveMethodInvocation.java:163<span class=\"token punctuation\">)</span> ~<span class=\"token punctuation\">[</span>spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE<span class=\"token punctuation\">]</span>\n\tat org.springframework.aop.framework.CglibAopProxy<span class=\"token variable\">$CglibMethodInvocation</span>.proceed<span class=\"token punctuation\">(</span>CglibAopProxy.java:747<span class=\"token punctuation\">)</span> ~<span class=\"token punctuation\">[</span>spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE<span class=\"token punctuation\">]</span>\n\tat org.springframework.aop.interceptor.AsyncExecutionInterceptor.lambda<span class=\"token variable\">$invoke</span><span class=\"token variable\">$0</span><span class=\"token punctuation\">(</span>AsyncExecutionInterceptor.java:115<span class=\"token punctuation\">)</span> ~<span class=\"token punctuation\">[</span>spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE<span class=\"token punctuation\">]</span>\n\tat java.base/java.util.concurrent.FutureTask.run<span class=\"token variable\">$$</span><span class=\"token variable\">$capture</span><span class=\"token punctuation\">(</span>FutureTask.java:264<span class=\"token punctuation\">)</span> ~<span class=\"token punctuation\">[</span>na:na<span class=\"token punctuation\">]</span>\n\tat java.base/java.util.concurrent.FutureTask.run<span class=\"token punctuation\">(</span>FutureTask.java<span class=\"token punctuation\">)</span> ~<span class=\"token punctuation\">[</span>na:na<span class=\"token punctuation\">]</span>\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker<span class=\"token punctuation\">(</span>ThreadPoolExecutor.java:1128<span class=\"token punctuation\">)</span> ~<span class=\"token punctuation\">[</span>na:na<span class=\"token punctuation\">]</span>\n\tat java.base/java.util.concurrent.ThreadPoolExecutor<span class=\"token variable\">$Worker</span>.run<span class=\"token punctuation\">(</span>ThreadPoolExecutor.java:628<span class=\"token punctuation\">)</span> ~<span class=\"token punctuation\">[</span>na:na<span class=\"token punctuation\">]</span>\n\tat java.base/java.lang.Thread.run<span class=\"token punctuation\">(</span>Thread.java:834<span class=\"token punctuation\">)</span> ~<span class=\"token punctuation\">[</span>na:na<span class=\"token punctuation\">]</span></code></pre></div>\n<p>All make sense as under the hood <code class=\"language-text\">RequestContextHolder</code> is used which in turn stores request attributes in <code class=\"language-text\">ThreadLocal</code>.</p>\n<h2>Solution</h2>\n<p>To access HTTP request data from outside of calling thread we could extend <code class=\"language-text\">ThreadPoolTaskExecutor</code>, copy existing request attributes provided by <code class=\"language-text\">RequestContextHolder#currentRequestAttributes</code> and set them in a new thread through <code class=\"language-text\">RequestContextHolder#setRequestAttributes</code>. Below is sample implementation:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyThreadPoolTaskExecutor</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ThreadPoolTaskExecutor</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> task<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MyCallable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestContextHolder</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentRequestAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">ListenableFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">submitListenable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> task<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">submitListenable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MyCallable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestContextHolder</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentRequestAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCallable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> callable<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">RequestAttributes</span> requestAttributes<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">MyCallable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> callable<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestAttributes</span> requestAttributes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>callable <span class=\"token operator\">=</span> callable<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>requestAttributes <span class=\"token operator\">=</span> <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>requestAttributes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">RequestAttributes</span> <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RequestAttributes</span> requestAttributes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// RequestAttributes needs to be copied as it will be garbage collected when origin request will complete.</span>\n            <span class=\"token keyword\">return</span> requestAttributes<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">RequestContextHolder</span><span class=\"token punctuation\">.</span><span class=\"token function\">setRequestAttributes</span><span class=\"token punctuation\">(</span>requestAttributes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> callable<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">RequestContextHolder</span><span class=\"token punctuation\">.</span><span class=\"token function\">resetRequestAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then we need to instruct spring to use our custom implementation of <code class=\"language-text\">TaskExecutor</code> like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token class-name\">TaskExecutor</span> <span class=\"token function\">taskExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ThreadPoolTaskExecutor</span> taskExecutor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyThreadPoolTaskExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        taskExecutor<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxPoolSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        taskExecutor<span class=\"token punctuation\">.</span><span class=\"token function\">setQueueCapacity</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        taskExecutor<span class=\"token punctuation\">.</span><span class=\"token function\">setThreadNamePrefix</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my-executor-\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> taskExecutor<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Please notice that the above solution should be considered more like a workaround than a final solution. A better approach would be to extract all required data while still in the context of calling thread and then pass these data to all interested parties.</p>\n<p>The full example can be found at <a href=\"https://github.com/ajurasz/no-thread-bound-request\">github</a>.</p>","frontmatter":{"title":"Accessing HTTP request data from outside of calling thread","date":"December 28, 2019"}},"next":null}}}