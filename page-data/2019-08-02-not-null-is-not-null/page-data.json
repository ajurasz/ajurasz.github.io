{"componentChunkName":"component---src-templates-blog-post-js","path":"/2019-08-02-not-null-is-not-null/","result":{"data":{"site":{"siteMetadata":{"title":"Dev Blog","author":"Arek Jurasz"}},"markdownRemark":{"id":"3df5f7d0-4628-561b-a2c9-6dde5dafcb4c","html":"<p>Recently I learned that MySQL 5.6 is so “nice” that it can provide default values for columns that have <code class=\"language-text\">NOT NULL</code> constrain when values for these columns are missing during insertion.</p>\n<!-- end -->\n<p>This feature is called <a href=\"https://dev.mysql.com/doc/refman/5.6/en/data-type-defaults.html#data-types-defaults-implicit\">Implicit Defaults</a>. Below is a complete example which shows this feature:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token operator\">></span> docker run --name some-mysql -e <span class=\"token assign-left variable\">MYSQL_ROOT_PASSWORD</span><span class=\"token operator\">=</span>root -d mysql:5.6\n<span class=\"token operator\">></span> docker <span class=\"token builtin class-name\">exec</span> -it some-mysql <span class=\"token function\">bash</span>\n\n<span class=\"token comment\"># mysql -u root -p</span>\nEnter password:\n\nmysql<span class=\"token operator\">></span> CREATE DATABASE <span class=\"token builtin class-name\">test</span><span class=\"token punctuation\">;</span>\nQuery OK, <span class=\"token number\">1</span> row affected <span class=\"token punctuation\">(</span><span class=\"token number\">0.01</span> sec<span class=\"token punctuation\">)</span>\n\nmysql<span class=\"token operator\">></span> use <span class=\"token builtin class-name\">test</span><span class=\"token punctuation\">;</span>\nDatabase changed\nmysql<span class=\"token operator\">></span> CREATE TABLE MY_DATA <span class=\"token punctuation\">(</span>id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,\n    -<span class=\"token operator\">></span> name VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> NOT NULL,\n    -<span class=\"token operator\">></span> value INT NOT NULL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nQuery OK, <span class=\"token number\">0</span> rows affected <span class=\"token punctuation\">(</span><span class=\"token number\">0.05</span> sec<span class=\"token punctuation\">)</span>\n\nmysql<span class=\"token operator\">></span> INSERT INTO MY_DATA <span class=\"token punctuation\">(</span>name, value<span class=\"token punctuation\">)</span> VALUES <span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nQuery OK, <span class=\"token number\">1</span> row affected <span class=\"token punctuation\">(</span><span class=\"token number\">0.04</span> sec<span class=\"token punctuation\">)</span>\n\nmysql<span class=\"token operator\">></span> INSERT INTO MY_DATA <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> VALUES <span class=\"token punctuation\">(</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nQuery OK, <span class=\"token number\">1</span> row affected, <span class=\"token number\">1</span> warning <span class=\"token punctuation\">(</span><span class=\"token number\">0.01</span> sec<span class=\"token punctuation\">)</span>\n\nmysql<span class=\"token operator\">></span> SELECT * FROM MY_DATA<span class=\"token punctuation\">;</span>\n+----+------+-------+\n<span class=\"token operator\">|</span> <span class=\"token function\">id</span> <span class=\"token operator\">|</span> name <span class=\"token operator\">|</span> value <span class=\"token operator\">|</span>\n+----+------+-------+\n<span class=\"token operator\">|</span>  <span class=\"token number\">1</span> <span class=\"token operator\">|</span> a    <span class=\"token operator\">|</span>     <span class=\"token number\">1</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>  <span class=\"token number\">2</span> <span class=\"token operator\">|</span> c    <span class=\"token operator\">|</span>     <span class=\"token number\">0</span> <span class=\"token operator\">|</span>\n+----+------+-------+\n<span class=\"token number\">2</span> rows <span class=\"token keyword\">in</span> <span class=\"token builtin class-name\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.04</span> sec<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Base on the linked documentation for implicit defaults our database server has got <strong>strict mode disabled by default</strong>. What is strict mode? </p>\n<blockquote>\n<p>Strict mode controls how MySQL handles invalid or missing values in data-change statements such as INSERT or UPDATE.\nSource: <a href=\"https://dev.mysql.com/doc/refman/5.6/en/sql-mode.html#sql-mode-strict#sql-mode-strict\">https://dev.mysql.com/doc/refman/5.6/en/sql-mode.html#sql-mode-strict#sql-mode-strict</a></p>\n</blockquote>\n<p>If we will repeat above code snipped with a more recent version of MySQL like 8 were <strong>strict mode is enabled by default</strong> then last insert command won’t work.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token operator\">></span> docker run --name some-mysql -e <span class=\"token assign-left variable\">MYSQL_ROOT_PASSWORD</span><span class=\"token operator\">=</span>root -d mysql:8\n\n<span class=\"token punctuation\">..</span>.\n\nmysql<span class=\"token operator\">></span> INSERT INTO MY_DATA <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> VALUES <span class=\"token punctuation\">(</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nERROR <span class=\"token number\">1364</span> <span class=\"token punctuation\">(</span>HY000<span class=\"token punctuation\">)</span>: Field <span class=\"token string\">'value'</span> doesn't have a default value</code></pre></div>\n<h2>Conclusion</h2>\n<p>When you work with MySQL and use a different version of the software make yourself a favour and check what SQL mode(s) are set on the environment with which you start to work. This can be done with single SQL command:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> @<span class=\"token variable\">@GLOBAL.sql_mode</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>and then invest few minutest to learn how enabled modes affect the SQL syntax MySQL supports and how data validation checks are performed. You can find a full list of SQL modes <a href=\"https://dev.mysql.com/doc/refman/5.6/en/sql-mode.html#sql-mode-full\">here</a>. </p>\n<p>So that you won’t have to spend a few hours figuring out why some of your e2e tests doesn’t work only on one environment!</p>","frontmatter":{"title":"NOT NULL is NOT NULL","date":"August 02, 2019"}}},"pageContext":{"slug":"/2019-08-02-not-null-is-not-null/","previous":{"fields":{"slug":"/2019-07-05-spring-boot-maven-plugin-and-provided-scope/"},"html":"<p>If you come from the JavaEE world you probably did set some of your project dependencies to the scope of <code class=\"language-text\">provided</code> if so then you can find one fact about <code class=\"language-text\">spring-boot-maven-plugin</code> to be interesting.</p>\n<!-- end -->\n<p>After adding <code class=\"language-text\">provided</code> scope to a dependency you expect that JDK or container (like JavaEE application server) will provide this dependency at runtime. Expected behaviour when running application without providing these dependencies will be to see <code class=\"language-text\">NoClassDefFoundError</code> or <code class=\"language-text\">ClassNotFoundException</code> all depends on how these missing classes are accessed (for more information see <a href=\"https://dzone.com/articles/java-classnotfoundexception-vs-noclassdeffounderro\">this article</a>). But this is not a case when using <code class=\"language-text\">spring-boot-maven-plugin</code> to run your application in standalone mode i.e. outside of any kind of container. After reading the explanation from Phil Webb (Pivotal) this behaviour makes sense:</p>\n<blockquote>\n<p>The packaging of provided scoped jars is intentional. The reason for this is that many developers are used to adding things like servlet-api as provided. Since there won’t be a servlet container to actually “provide” the dependency we package it inside the JAR.</p>\n</blockquote>\n<p>Source: <a href=\"https://github.com/spring-projects/spring-boot/issues/413#issuecomment-36361340\">https://github.com/spring-projects/spring-boot/issues/413#issuecomment-36361340</a></p>\n<p>In <code class=\"language-text\">spring-boot-maven-plugin</code> sources we can find how dependencies are loaded for <code class=\"language-text\">run</code> goal.</p>\n<p><code class=\"language-text\">AbstractRunMojo.java</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addDependencies</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>URL<span class=\"token punctuation\">></span></span> urls<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">MalformedURLException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MojoExecutionException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">FilterArtifacts</span> filters <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>useTestClasspath <span class=\"token operator\">?</span> <span class=\"token function\">getFilters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">getFilters</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TestArtifactFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Artifact</span><span class=\"token punctuation\">></span></span> artifacts <span class=\"token operator\">=</span> <span class=\"token function\">filterDependencies</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>project<span class=\"token punctuation\">.</span><span class=\"token function\">getArtifacts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> filters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Artifact</span> artifact <span class=\"token operator\">:</span> artifacts<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>artifact<span class=\"token punctuation\">.</span><span class=\"token function\">getFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            urls<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>artifact<span class=\"token punctuation\">.</span><span class=\"token function\">getFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toURI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toURL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">this.project.getArtifacts()</code> loads all project dependencies including transitive ones (<code class=\"language-text\">provided</code> scoped are loaded as well!). After, the load is done we removed dependencies based on configured filters - by default only test classes are removed. Yet it is still possible to make some exclusion in the plugin configuration.</p>\n<h2>Conclusion</h2>\n<p>When your project deliverable is a war file that will be run in a container then it is very pleasant to be able to run it in standalone mode without additional tweaks when there are some <code class=\"language-text\">provided</code> scoped dependencies.</p>","frontmatter":{"title":"Spring Boot Maven Plugin and provided scope","date":"July 5, 2019"}},"next":{"fields":{"slug":"/2019-08-25-micronaut-testcontainers-spock/"},"html":"<p>Before adopting a new framework I always verify does it provide decent testing support. If you follow <code class=\"language-text\">SOLID</code> principles then to test your business logic you just need a test framework like <code class=\"language-text\">JUnit</code> or <code class=\"language-text\">Spock</code>. Things get complicated when we want to test our code on integration level where business logic and infrastructure code are glue together and check if they behave correctly. This post focuses on writing\nintegration tests (IT) for <code class=\"language-text\">Micronaut</code> application.</p>\n<!-- end -->\n<p><a href=\"https://micronaut.io/index.html\">Micronaut</a> is a new kid on the block as its first GA release was less than a year ago on October 23, 2018. It has a lot of interesting features about which you can read in their official <a href=\"https://docs.micronaut.io/latest/guide/index.html\">documentation</a> but for this post, I will mention just one. It has blazing-fast startup time thanks to ahead of time compilation - I will explain later why this is important in case of ITs.</p>\n<p>When writing integration tests your application will probably require some third-party services to work. In most cases, this will be a database. And to be honest, nowadays this requirement can be easily achieved with the help of different CI vendors. Following is the sample configuration of the two most popular CI platforms where we mark what additional services are required for our build process:</p>\n<p><code class=\"language-text\">Travis CI</code></p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># travis.yml</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> mysql </code></pre></div>\n<p><code class=\"language-text\">CircleCI</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">version: 2\njobs:\n  build:\n    docker:\n      - image: circleci/openjdk:8-jdk\n      - image: mysql\n\n    steps:\n      - setup_remote_docker</code></pre></div>\n<p>But what if we want to run IT locally - then we need to start required docker containers before execution. I know that people often tend to use in-memory replacements for differents services but in my mind, IT\nshould be as close as possible to the target environment. But there is a better solution than manually taking care of running all required containers - <a href=\"https://www.testcontainers.org/\">Testcontainers</a> is a library that allows us to easily manage docker infrastructure from our test code. </p>\n<h2>Base structure</h2>\n<p>If it comes to testing <code class=\"language-text\">Micronaut</code> and <code class=\"language-text\">Testcontainers</code> each has handy annotation which brings their functionality to life. </p>\n<h3>Micronaut</h3>\n<p>For <code class=\"language-text\">Micronaut</code> this is a <code class=\"language-text\">@MicronautTest</code> which starts your real application same way as you would run <code class=\"language-text\">java -jar ...</code> command. Usually, you would create some base class with all required configuration\nand then inherit it from your IT cases. Something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\"><span class=\"token comment\">// IntegrationSpecificationBase.groovy</span>\n\n<span class=\"token annotation punctuation\">@MicronautTest</span><span class=\"token punctuation\">(</span>environments <span class=\"token operator\">=</span> <span class=\"token string gstring\">\"it\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IntegrationSpecificationBase</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Specification</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TestPropertyProvider</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> String<span class=\"token operator\">></span> <span class=\"token function\">getProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// TodoControllerSpec.groovy</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoControllerSpec</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">IntegrationSpecification</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">def</span> <span class=\"token string gstring\">\"should get all todos\"</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// test body</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This setup revels one potential problem. Potential because it does not have to be a problem for every case due to the main feature of the framework mentioned at the beginning - fast startup time.\nProblem is with the way how <code class=\"language-text\">MicronautTest</code> annotation is bound to test execution lifecycle - <code class=\"language-text\">Micronaut</code> application is built and started in <code class=\"language-text\">setupSpec</code>. Tear down happen in <code class=\"language-text\">cleanupSpec</code>. So\nin the above example, <code class=\"language-text\">Micronaut</code> application will be started/stopped twice. This can be fixed simply by not using <code class=\"language-text\">@MicronautTest</code> annotation, i.e.:</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IntegrationSpecificationBase</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Specification</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TestPropertyProvider</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@AutoCleanup</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> EmbeddedServer embeddedServer <span class=\"token operator\">=</span> ApplicationContext<span class=\"token operator\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>\n            EmbeddedServer<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> Object<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n            <span class=\"token string gstring\">\"it\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Which approach you will choose should mostly be dictated by how long it takes for your application to start. Although <code class=\"language-text\">Micronaut</code> is fast, other libraries that you use doesn’t need to be as fast (e.g. <code class=\"language-text\">micronaut-hibernate-jpa</code>).</p>\n<h3>Testcontainers</h3>\n<p><code class=\"language-text\">@Testcontainers</code> annotation similarly to <code class=\"language-text\">@MicronautTest</code> is bound to the same lifecycle phases. Unfortunately, right now there is no way of defining processing order - <a href=\"https://github.com/spockframework/spock/issues/646\">change request</a> was already proposed on github. Because of this, I don’t see the possibility to use these two annotations together. Our desired behaviour would\nbe to start all required docker containers before starting <code class=\"language-text\">Micronaut</code> application. This could be achieved in two ways.</p>\n<ol>\n<li>Spock global extension</li>\n</ol>\n<p>A global extension can be used to execute some code at the very start and the very end of <code class=\"language-text\">Spock</code> execution. There are three steps needed to create such an extension:</p>\n<ol>\n<li>Create <code class=\"language-text\">META-INF/services/org.spockframework.runtime.extension.IGlobalExtension</code> file</li>\n<li>Create a class that implements <code class=\"language-text\">IGlobalExtension</code> interface</li>\n<li>Add fully-qualified class name created in step <code class=\"language-text\">2</code> to file created in step <code class=\"language-text\">1</code></li>\n</ol>\n<p>Following example shows how to start all defined containers by using global extension:</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DockerInfrastructureRunner</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractGlobalExtension</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> Collection<span class=\"token operator\">&lt;</span>GenericContainer<span class=\"token operator\">></span> containers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n            MySqlContainer<span class=\"token operator\">.</span>MY_SQL_CONTAINER\n    <span class=\"token punctuation\">]</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        containers<span class=\"token operator\">.</span>each <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>it<span class=\"token operator\">.</span><span class=\"token function\">isRunning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                it<span class=\"token operator\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        containers<span class=\"token operator\">.</span>each <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>it<span class=\"token operator\">.</span><span class=\"token function\">isRunning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                it<span class=\"token operator\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"2\">\n<li>Groovy <code class=\"language-text\">with</code> method </li>\n</ol>\n<p>We can also take advantage of some groovy goodness and declare and start docker container in one go like:</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MySqlContainer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> GenericContainer MY_SQL_CONTAINER <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericContainer</span><span class=\"token punctuation\">(</span><span class=\"token string gstring\">\"mysql:8\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">.</span><span class=\"token function\">withEnv</span><span class=\"token punctuation\">(</span><span class=\"token string gstring\">\"MYSQL_ROOT_PASSWORD\"</span><span class=\"token punctuation\">,</span> <span class=\"token string gstring\">\"password\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">.</span><span class=\"token function\">withEnv</span><span class=\"token punctuation\">(</span><span class=\"token string gstring\">\"MYSQL_DATABASE\"</span><span class=\"token punctuation\">,</span> <span class=\"token string gstring\">\"it\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">.</span><span class=\"token function\">withExposedPorts</span><span class=\"token punctuation\">(</span><span class=\"token number\">3306</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">.</span>with <span class=\"token punctuation\">{</span>\n                it<span class=\"token operator\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                it\n            <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Conclusion</h2>\n<p>When you want to use desired tools you will have to agree on a few workarounds to make everything works as you want. The biggest surprise for me was not being able to run <code class=\"language-text\">Micronaut</code> or <code class=\"language-text\">Testcontainers</code> just once out of the box together with <code class=\"language-text\">Spock</code>. It is also worth noticing that <code class=\"language-text\">Micronaut</code> and <code class=\"language-text\">Testcontainers</code> project contains modules for <code class=\"language-text\">JUnit</code> where start and stop functions are done in <code class=\"language-text\">BeforeAllCallback</code> and <code class=\"language-text\">AfterAllCallback</code> which base on Javadoc should be\nexecuted just once for a single extension (i.e. before and after all our tests).</p>\n<p>The complete example can be found at <a href=\"https://github.com/ajurasz/micronaut-it\">github</a>. There are two branches:</p>\n<ol>\n<li><code class=\"language-text\">develop</code> where <code class=\"language-text\">@MicronautTest</code> annotation is used together with <code class=\"language-text\">Spock</code> global extension</li>\n<li><code class=\"language-text\">shared-context</code> where <code class=\"language-text\">Micronaut</code> is started manually and docker containers by the usage of groovy <code class=\"language-text\">with</code> method</li>\n</ol>","frontmatter":{"title":"Micronaut, Testcontainers and Spock","date":"August 25, 2019"}}}}}