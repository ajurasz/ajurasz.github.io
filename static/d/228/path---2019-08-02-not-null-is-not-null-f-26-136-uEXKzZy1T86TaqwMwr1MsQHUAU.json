{"data":{"site":{"siteMetadata":{"title":"Dev Blog","author":"Arek Jurasz"}},"markdownRemark":{"id":"92be2542-8474-5cf1-8ce9-bde600a67595","html":"<p>Recently I learned that MySQL 5.6 is so “nice” that it can provide default values for columns that have <code class=\"language-text\">NOT NULL</code> constrain when values for these columns are missing during insertion.</p>\n<!-- end -->\n<p>This feature is called <a href=\"https://dev.mysql.com/doc/refman/5.6/en/data-type-defaults.html#data-types-defaults-implicit\">Implicit Defaults</a>. Below is a complete example which shows this feature:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">&gt; docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=root -d mysql:5.6\n&gt; docker exec -it some-mysql bash\n\n# mysql -u root -p\nEnter password:\n\nmysql&gt; CREATE DATABASE test;\nQuery OK, 1 row affected (0.01 sec)\n\nmysql&gt; use test;\nDatabase changed\nmysql&gt; CREATE TABLE MY_DATA (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,\n    -&gt; name VARCHAR(10) NOT NULL,\n    -&gt; value INT NOT NULL);\nQuery OK, 0 rows affected (0.05 sec)\n\nmysql&gt; INSERT INTO MY_DATA (name, value) VALUES (&#39;a&#39;, 1);\nQuery OK, 1 row affected (0.04 sec)\n\nmysql&gt; INSERT INTO MY_DATA (name) VALUES (&#39;c&#39;);\nQuery OK, 1 row affected, 1 warning (0.01 sec)\n\nmysql&gt; SELECT * FROM MY_DATA;\n+----+------+-------+\n| id | name | value |\n+----+------+-------+\n|  1 | a    |     1 |\n|  2 | c    |     0 |\n+----+------+-------+\n2 rows in set (0.04 sec)</code></pre></div>\n<p>Base on the linked documentation for implicit defaults our database server has got <strong>strict mode disabled by default</strong>. What is strict mode? </p>\n<blockquote>\n<p>Strict mode controls how MySQL handles invalid or missing values in data-change statements such as INSERT or UPDATE.\nSource: <a href=\"https://dev.mysql.com/doc/refman/5.6/en/sql-mode.html#sql-mode-strict#sql-mode-strict\">https://dev.mysql.com/doc/refman/5.6/en/sql-mode.html#sql-mode-strict#sql-mode-strict</a></p>\n</blockquote>\n<p>If we will repeat above code snipped with a more recent version of MySQL like 8 were <strong>strict mode is enabled by default</strong> then last insert command won’t work.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">&gt; docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=root -d mysql:8\n\n...\n\nmysql&gt; INSERT INTO MY_DATA (name) VALUES (&#39;c&#39;);\nERROR 1364 (HY000): Field &#39;value&#39; doesn&#39;t have a default value</code></pre></div>\n<h2>Conclusion</h2>\n<p>When you work with MySQL and use a different version of the software make yourself a favour and check what SQL mode(s) are set on the environment with which you start to work. This can be done with single SQL command:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> @<span class=\"token variable\">@GLOBAL.sql_mode</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>and then invest few minutest to learn how enabled modes affect the SQL syntax MySQL supports and how data validation checks are performed. You can find a full list of SQL modes <a href=\"https://dev.mysql.com/doc/refman/5.6/en/sql-mode.html#sql-mode-full\">here</a>. </p>\n<p>So that you won’t have to spend a few hours figuring out why some of your e2e tests doesn’t work only on one environment!</p>","frontmatter":{"title":"NOT NULL is NOT NULL","date":"August 02, 2019"}}},"pageContext":{"slug":"/2019-08-02-not-null-is-not-null/","previous":{"fields":{"slug":"/2019-07-05-spring-boot-maven-plugin-and-provided-scope/"},"html":"<p>If you come from the JavaEE world you probably did set some of your project dependencies to the scope of <code class=\"language-text\">provided</code> if so then you can find one fact about <code class=\"language-text\">spring-boot-maven-plugin</code> to be interesting.</p>\n<!-- end -->\n<p>After adding <code class=\"language-text\">provided</code> scope to a dependency you expect that JDK or container (like JavaEE application server) will provide this dependency at runtime. Expected behaviour when running application without providing these dependencies will be to see <code class=\"language-text\">NoClassDefFoundError</code> or <code class=\"language-text\">ClassNotFoundException</code> all depends on how these missing classes are accessed (for more information see <a href=\"https://dzone.com/articles/java-classnotfoundexception-vs-noclassdeffounderro\">this article</a>). But this is not a case when using <code class=\"language-text\">spring-boot-maven-plugin</code> to run your application in standalone mode i.e. outside of any kind of container. After reading the explanation from Phil Webb (Pivotal) this behaviour makes sense:</p>\n<blockquote>\n<p>The packaging of provided scoped jars is intentional. The reason for this is that many developers are used to adding things like servlet-api as provided. Since there won’t be a servlet container to actually “provide” the dependency we package it inside the JAR.</p>\n</blockquote>\n<p>Source: <a href=\"https://github.com/spring-projects/spring-boot/issues/413#issuecomment-36361340\">https://github.com/spring-projects/spring-boot/issues/413#issuecomment-36361340</a></p>\n<p>In <code class=\"language-text\">spring-boot-maven-plugin</code> sources we can find how dependencies are loaded for <code class=\"language-text\">run</code> goal.</p>\n<p><code class=\"language-text\">AbstractRunMojo.java</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addDependencies</span><span class=\"token punctuation\">(</span>List<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>URL<span class=\"token punctuation\">></span></span> urls<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> MalformedURLException<span class=\"token punctuation\">,</span> MojoExecutionException <span class=\"token punctuation\">{</span>\n    FilterArtifacts filters <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>useTestClasspath <span class=\"token operator\">?</span> <span class=\"token function\">getFilters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">getFilters</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TestArtifactFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Set<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Artifact<span class=\"token punctuation\">></span></span> artifacts <span class=\"token operator\">=</span> <span class=\"token function\">filterDependencies</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>project<span class=\"token punctuation\">.</span><span class=\"token function\">getArtifacts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> filters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>Artifact artifact <span class=\"token operator\">:</span> artifacts<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>artifact<span class=\"token punctuation\">.</span><span class=\"token function\">getFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            urls<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>artifact<span class=\"token punctuation\">.</span><span class=\"token function\">getFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toURI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toURL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">this.project.getArtifacts()</code> loads all project dependencies including transitive ones (<code class=\"language-text\">provided</code> scoped are loaded as well!). After, the load is done we removed dependencies based on configured filters - by default only test classes are removed. Yet it is still possible to make some exclusion in the plugin configuration.</p>\n<h2>Conclusion</h2>\n<p>When your project deliverable is a war file that will be run in a container then it is very pleasant to be able to run it in standalone mode without additional tweaks when there are some <code class=\"language-text\">provided</code> scoped dependencies.</p>","frontmatter":{"title":"Spring Boot Maven Plugin and provided scope","date":"July 5, 2019"}},"next":null}}