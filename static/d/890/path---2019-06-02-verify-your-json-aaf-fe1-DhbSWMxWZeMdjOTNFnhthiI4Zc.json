{"data":{"site":{"siteMetadata":{"title":"Dev Blog","author":"Arek Jurasz"}},"markdownRemark":{"id":"7dc773e1-1cca-5176-820d-689892ce1dcc","html":"<p>When you hear API and web client together you think <code class=\"language-text\">REST</code>, at least I do. This is because it is still one of the most popular architectural paradigms for building APIs. Another approach about which I hear from time to time is <code class=\"language-text\">GraphQL</code>. There is one common part for these two - they talk JSON. Both specifications <code class=\"language-text\">REST</code> and <code class=\"language-text\">GraphQL</code> does not restrict only to this format but due to its simplicity, it is a very common choice. Every healthy software contains tests on different layers, from unit up to the end-to-end tests. So, how could we verify responses from our APIs?</p>\n<!-- end -->\n<p>In <code class=\"language-text\">java</code> world, especiality in <code class=\"language-text\">Spring</code> ecosystem when it comes to testing APIs you probably saw one of these:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mockMvc<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello?name=John\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span><span class=\"token punctuation\">(</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span><span class=\"token punctuation\">(</span><span class=\"token function\">jsonPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$.name\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">jsonPath</code> static method in the above snippet is a wrapper around great library <a href=\"https://github.com/json-path/JsonPath\">JsonPath</a>. Together with <a href=\"https://github.com/hamcrest/JavaHamcrest\">Hamcrest</a> it just makes writing test against JSON a true pleasure. </p>\n<p>Note: <a href=\"https://github.com/json-path/JsonPath\">JsonPath</a> does not require <code class=\"language-text\">Spring</code> it just need some JSON.</p>\n<p>I have created simple <a href=\"https://github.com/ajurasz/jsonpath-playground\">playground</a> for testing different <a href=\"https://github.com/json-path/JsonPath\">JsonPath</a> expressions. <code class=\"language-text\">jsonPath</code> static method is provided which expects expression, matcher and a JSON string against which expression will be executed.</p>\n<p>Let us assume that <code class=\"language-text\">json</code> argument in the following examples will have this structure:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5cdaff5fce90bc3ddd98475b\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"guid\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"57cc1cbb-52ba-49ff-af66-4b9dde85a207\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"isActive\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"a\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"b\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"c\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"d\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token property\">\"e\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token property\">\"f\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"end\"</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"f\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"other end\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Working with JSON objects</h2>\n<p>Every <a href=\"https://github.com/json-path/JsonPath\">JsonPath</a> expression starts with <code class=\"language-text\">$</code> symbol which represents <strong>root</strong> element (no matter if the JSON structure is an object or array). When you want to access the specific property you have two choices - dot or bracket notation. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//dot notation</span>\n<span class=\"token function\">jsonPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$.guid\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"57cc1cbb-52ba-49ff-af66-4b9dde85a207\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAgainst</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">jsonPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$.isActive\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">isA</span><span class=\"token punctuation\">(</span>Boolean<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAgainst</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">jsonPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$.age\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">instanceOf</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAgainst</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">jsonPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$.nonExisting\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">nullValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">jsonPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$.name.first\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Opal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAgainst</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//bracket notation</span>\n<span class=\"token function\">jsonPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$['guid']\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"57cc1cbb-52ba-49ff-af66-4b9dde85a207\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAgainst</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">jsonPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$['isActive']\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">isA</span><span class=\"token punctuation\">(</span>Boolean<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAgainst</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">jsonPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$['name']['first']\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Opal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAgainst</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Although the second approach is noisier it is useful in situation when property name contains special characters or starts with a character other than represented by this regular expression <code class=\"language-text\">/[a-zA-Z_]/</code>.</p>\n<p>We can also do a deep scan to access property in very nested object. To acccess <code class=\"language-text\">f</code> property in our sample we could:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token function\">jsonPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$..f\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">hasItems</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"other-end\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAgainst</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// or using standard dot notation</span>\n<span class=\"token function\">jsonPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$.a.b.c.d.e.f\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAgainst</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Notice that deep scann returns array of values because depending on JSON structure it can find more properties with the name <code class=\"language-text\">f</code>. We can narrow down what path will be part of a deep scan by pointing to spefici property from which deep scan starts:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token function\">jsonPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$.a..f\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">hasItems</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAgainst</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Working with JSON arrays</h2>\n<p>Let us assume that <code class=\"language-text\">json</code> argument in the following examples will have this structure:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"friends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hester Dallai\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">31</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Lucinda Goff\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">27</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Ella Day\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">17</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"adult\"</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To access the single property from an object inside array you use square brackets just like in <code class=\"language-text\">java</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token function\">jsonPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$.friends[0].id\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAgainst</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://github.com/json-path/JsonPath\">JsonPath</a> expressions support wildcards (<code class=\"language-text\">*</code>) which selects all elements in both object and arrays. </p>\n<p>To verify the age of our friends we can:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token function\">jsonPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$.friends[*].age\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">hasItems</span><span class=\"token punctuation\">(</span><span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAgainst</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>When you have ever worked with <code class=\"language-text\">python</code> you probably came across slice notation, which in some part is supported in <a href=\"https://github.com/json-path/JsonPath\">JsonPath</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">:</span>stop<span class=\"token punctuation\">]</span>     <span class=\"token comment\"># from start to stop - 1</span>\n<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>         <span class=\"token comment\"># from start to the end of array</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>n<span class=\"token punctuation\">]</span>             <span class=\"token comment\"># selects first n - 1 elements</span>\n<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>n<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>            <span class=\"token comment\"># selects last n elements</span></code></pre></div>\n<p>Knowing this slice expressions would like like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token function\">jsonPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$.friends[:3].age\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">hasItems</span><span class=\"token punctuation\">(</span><span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAgainst</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">jsonPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$.friends[1:2].age\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">hasItems</span><span class=\"token punctuation\">(</span><span class=\"token number\">27</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAgainst</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">jsonPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$.friends[:2].age\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">hasItems</span><span class=\"token punctuation\">(</span><span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAgainst</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">jsonPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$.friends[-2:].age\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">hasItems</span><span class=\"token punctuation\">(</span><span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAgainst</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Filter expression</h2>\n<p>Next powerful feature of <a href=\"https://github.com/json-path/JsonPath\">JsonPath</a> are filter expression <code class=\"language-text\">[?(&lt;expression&gt;)]</code> which make selection of elements more dynamic. Complete list of supported operators can be found at <a href=\"https://github.com/json-path/JsonPath#filter-operators\">https://github.com/json-path/JsonPath#filter-operators</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token function\">jsonPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$.friends[?(@.age >= 18)].id\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">hasItems</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAgainst</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">jsonPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$.friends[?(@.id == 1)].age\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">hasItems</span><span class=\"token punctuation\">(</span><span class=\"token number\">27</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAgainst</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">jsonPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$.friends[?(@.id != 1)].age\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">hasItems</span><span class=\"token punctuation\">(</span><span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAgainst</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">jsonPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$.friends[?(@.age in [31, 17])].id\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">hasItems</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAgainst</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">jsonPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$.friends[?(@.name =~ /^.*Da.*$/i)].id\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">hasItems</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAgainst</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">@</code> represent the current node. In the above example this will represent friend node and for each of our friends (<code class=\"language-text\">$.friends[]</code>), given property will be returned when the expression evaluates to true.</p>\n<p>We can be even more dynamic by referencing to other properties:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token function\">jsonPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$.friends[?(@.age >= 18)].id\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">hasItems</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAgainst</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">jsonPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$.friends[?(@.age >= $.adult)].id\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">hasItems</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAgainst</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Functions</h2>\n<p><a href=\"https://github.com/json-path/JsonPath\">JsonPath</a> provides functions that can be added at the end of our expression. The rule is simple  - output of expression is input to the function. Complete list of build in functions can be found at <a href=\"https://github.com/json-path/JsonPath#functions\">https://github.com/json-path/JsonPath#functions</a>.</p>\n<p>Let us assume that <code class=\"language-text\">json</code> argument in the following examples will have this structure:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"range\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">8</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">9</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>then we can run functions that expects arrays as input</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token function\">jsonPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$.range.avg()\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token number\">4.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAgainst</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">jsonPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$.range.min()\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAgainst</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">jsonPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$.range.max()\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token number\">9.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAgainst</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">jsonPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$.range.stddev()\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.8722813232690143</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAgainst</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">jsonPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$.range.length()\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAgainst</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Conclusion</h2>\n<p>As you saw <a href=\"https://github.com/json-path/JsonPath\">JsonPath</a> expressions are very powerful, they should be able to extract whatever you want from a JSON structure. All used examples and more can be found on <a href=\"https://github.com/ajurasz/jsonpath-playground\">github</a>.</p>","frontmatter":{"title":"Verify your JSON","date":"June 02, 2019"}}},"pageContext":{"slug":"/2019-06-02-verify-your-json/","previous":{"fields":{"slug":"/2019-05-12-wlp-spring-aop/"},"excerpt":"Investigation walkthrough for an issue related to multiple   available when   application is deployed on   ( ). Motivation Recently I was…","frontmatter":{"title":"IBM WebSphere Liberty and Spring AOP","date":"May 12, 2019"}},"next":{"fields":{"slug":"/2019-06-08-build-native-imge-with-graalvm/"},"excerpt":"Last month first production-ready version of   with number   was released.   is a virtual machine capable to run application written in…","frontmatter":{"title":"Build a native image with GraalVM","date":"June 8, 2019"}}}}