{"data":{"site":{"siteMetadata":{"title":"Dev Blog","author":"Arek Jurasz"}},"markdownRemark":{"id":"e92cf358-328d-545c-aa9d-5842762a3364","html":"<p>Last month first production-ready version of <code class=\"language-text\">GraalVM</code> with number <code class=\"language-text\">19.0</code> was released. <code class=\"language-text\">GraalVM</code> is a virtual machine capable to run application written in <code class=\"language-text\">JavaScript</code>, <code class=\"language-text\">Python</code>, <code class=\"language-text\">Ruby</code>, <code class=\"language-text\">R</code>, LLVM-based languages like <code class=\"language-text\">C</code>, <code class=\"language-text\">C++</code> and of course our beloved JVM-based languages like <code class=\"language-text\">Java</code>, <code class=\"language-text\">Scala</code>, <code class=\"language-text\">Kotlin</code>, <code class=\"language-text\">Groovy</code> and <code class=\"language-text\">Clojure</code>. Some of the main goals for this new virtual machine are:</p>\n<ul>\n<li>improve the performance of applications build with JVM-based languages</li>\n<li>reduce startup time by usage of AOT (ahead-of-time) compilation</li>\n<li>write polyglot applications</li>\n<li>compile JVM-based code to a standalone executable a.k.a. native image.</li>\n</ul>\n<!-- end -->\n<p>With this post, I would like to focus on the last goal and build a native image. The assumption is very simple, take <a href=\"https://github.com/json-path/JsonPath\">JsonPath</a> library, write some <code class=\"language-text\">Java</code> code to interact with this library and then from terminal quickly test any <a href=\"https://github.com/json-path/JsonPath\">JsonPath</a> expression you can think of, like</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -s https://api.github.com/users/ajurasz <span class=\"token operator\">|</span> json_path <span class=\"token string\">\"$.created_at\"</span></code></pre></div>\n<h2>Native image?</h2>\n<p>As already mentioned one of the main goals of <code class=\"language-text\">GraalVM</code> is the possibility to produce native images which are executables that do not require JRE (java runtime environment) to be present on the system. At first, when I heard about this feature I thought that the code instead to be compiled to bytecode will be directly compiled to machine code but I was wrong. During the process of creating a native image, all classes of our application and their dependencies are statically analyses to know which part of that code is reachable during runtime. These static analyses take JDK code under consideration as well. When we know all classes and methods used in the runtime then <code class=\"language-text\">GraalVM</code> compiles it ahead-of-time. To make this AOT compiled code to run we still need some runtime on which our program can be run. The produced native image includes something called <code class=\"language-text\">Substrate VM</code> which is an embeddable virtual machine containing components like memory management, thread scheduling, de-optimizer or even garbage collector. Having an initial idea about what native image is let’s install <code class=\"language-text\">GraalVM</code>, <code class=\"language-text\">native-image</code> utility and write some code.</p>\n<h2>Installation</h2>\n<p>First, let’s install <code class=\"language-text\">GraalVM</code> through <code class=\"language-text\">sdkman</code></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> apt update\n<span class=\"token function\">sudo</span> apt <span class=\"token function\">install</span> unzip <span class=\"token function\">zip</span>\n<span class=\"token function\">curl</span> -s <span class=\"token string\">\"https://get.sdkman.io\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">bash</span>\n<span class=\"token function\">source</span> <span class=\"token string\">\"/home/ubuntu/.sdkman/bin/sdkman-init.sh\"</span>\nsdk <span class=\"token function\">install</span> java 19.0.0-grl</code></pre></div>\n<p>To use <code class=\"language-text\">native-image</code> command beside native image utility there are some <a href=\"https://www.graalvm.org/docs/reference-manual/aot-compilation/#prerequisites\">prerequisites</a></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">gu <span class=\"token function\">install</span> native-image\n<span class=\"token function\">sudo</span> apt <span class=\"token function\">install</span> build-essential\n<span class=\"token function\">sudo</span> apt <span class=\"token function\">install</span> libz-dev</code></pre></div>\n<h2>Code</h2>\n<p>As shown above, we want to pipe output from <code class=\"language-text\">curl</code> command to our application as input. To get access to this input from application level we need to read it from <code class=\"language-text\">System.in</code>. <a href=\"https://github.com/json-path/JsonPath\">JsonPath</a> expression will be simply passed as an argument. In the end, we just need to evaluate the expression against received json. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>BufferedReader<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>InputStreamReader<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>stream<span class=\"token punctuation\">.</span>Collectors<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>jayway<span class=\"token punctuation\">.</span>jsonpath<span class=\"token punctuation\">.</span>JsonPath<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        String expression <span class=\"token operator\">=</span> <span class=\"token function\">extractExpression</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        String json <span class=\"token operator\">=</span> <span class=\"token function\">readInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">,</span> expression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> String <span class=\"token function\">extractExpression</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Single JsonPath expression is required.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> String <span class=\"token function\">readInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">lines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>Collectors<span class=\"token punctuation\">.</span><span class=\"token function\">joining</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> String <span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span>String json<span class=\"token punctuation\">,</span> String expression<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        JsonPath jsonPath <span class=\"token operator\">=</span> JsonPath<span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> jsonPath<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Compilation</h2>\n<p>First, we need to compile our java code with <code class=\"language-text\">javac</code> command</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">javac -cp <span class=\"token string\">\"libs/*\"</span> Application.java</code></pre></div>\n<p><code class=\"language-text\">libs</code> directory contains all 3rd party dependencies required for this application to run</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">tree\n<span class=\"token keyword\">.</span>\n├── Application.java\n└── libs\n    ├── accessors-smart-1.2.jar\n    ├── asm-5.0.4.jar\n    ├── json-path-2.4.0.jar\n    ├── json-smart-2.3.jar\n    ├── slf4j-api-1.7.25.jar\n    └── slf4j-jdk14-1.7.25.jar\n\n1 directory, 8 files</code></pre></div>\n<p>After successful ran of compile command <code class=\"language-text\">Application.class</code> should be produced.</p>\n<h2>Build native image</h2>\n<p>Command to build native image is very similar to compiling java file, it requires only java class and <code class=\"language-text\">-cp</code> parameter in case if we use external dependencies which we do.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">native-image -cp <span class=\"token string\">\".:libs/*\"</span> -H:Name<span class=\"token operator\">=</span>json_path  Application </code></pre></div>\n<p><code class=\"language-text\">-H:Name</code> is used just to give a name to produced executable. But running above command will fail with the following message</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Warning: Aborting stand-alone image build. com.oracle.svm.hosted.substitute.DeletedElementException: Unsupported method java.lang.ClassLoader.defineClass<span class=\"token punctuation\">(</span>String, byte<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>, int, int<span class=\"token punctuation\">)</span> is reachable: The declaring class of this element has been substituted, but this element is not present <span class=\"token keyword\">in</span> the substitution class\nTo diagnose the issue, you can add the option --report-unsupported-elements-at-runtime. The unsupported element is <span class=\"token keyword\">then</span> reported at run <span class=\"token function\">time</span> when it is accessed the first time.\nDetailed message:\nTrace:\n        at parsing net.minidev.asm.DynamicClassLoader.defineClass<span class=\"token punctuation\">(</span>DynamicClassLoader.java:86<span class=\"token punctuation\">)</span>\nCall path from entry point to net.minidev.asm.DynamicClassLoader.defineClass<span class=\"token punctuation\">(</span>String, byte<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>:\n        at net.minidev.asm.DynamicClassLoader.defineClass<span class=\"token punctuation\">(</span>DynamicClassLoader.java:81<span class=\"token punctuation\">)</span>\n        at net.minidev.asm.BeansAccessBuilder.bulid<span class=\"token punctuation\">(</span>BeansAccessBuilder.java:313<span class=\"token punctuation\">)</span>\n        at net.minidev.asm.BeansAccess.get<span class=\"token punctuation\">(</span>BeansAccess.java:111<span class=\"token punctuation\">)</span>\n        at net.minidev.json.reader.BeansWriterASM.writeJSONString<span class=\"token punctuation\">(</span>BeansWriterASM.java:17<span class=\"token punctuation\">)</span>\n        at net.minidev.json.JSONValue.writeJSONString<span class=\"token punctuation\">(</span>JSONValue.java:586<span class=\"token punctuation\">)</span>\n        at net.minidev.json.reader.JsonWriter<span class=\"token variable\">$5</span>.writeJSONString<span class=\"token punctuation\">(</span>JsonWriter.java:113<span class=\"token punctuation\">)</span>\n        at net.minidev.json.reader.JsonWriter<span class=\"token variable\">$5</span>.writeJSONString<span class=\"token punctuation\">(</span>JsonWriter.java:1<span class=\"token punctuation\">)</span>\n        at net.minidev.json.JSONArray.writeJSONString<span class=\"token punctuation\">(</span>JSONArray.java:75<span class=\"token punctuation\">)</span>\n        at net.minidev.json.JSONArray.toJSONString<span class=\"token punctuation\">(</span>JSONArray.java:52<span class=\"token punctuation\">)</span>\n        at net.minidev.json.JSONArray.toJSONString<span class=\"token punctuation\">(</span>JSONArray.java:102<span class=\"token punctuation\">)</span>\n        at net.minidev.json.JSONArray.toString<span class=\"token punctuation\">(</span>JSONArray.java:113<span class=\"token punctuation\">)</span>\n        at java.lang.String.valueOf<span class=\"token punctuation\">(</span>String.java:2994<span class=\"token punctuation\">)</span>\n        at java.lang.StringBuilder.append<span class=\"token punctuation\">(</span>StringBuilder.java:131<span class=\"token punctuation\">)</span>\n        at com.oracle.svm.core.amd64.AMD64CPUFeatureAccess.verifyHostSupportsArchitecture<span class=\"token punctuation\">(</span>AMD64CPUFeatureAccess.java:179<span class=\"token punctuation\">)</span>\n        at com.oracle.svm.core.JavaMainWrapper.run<span class=\"token punctuation\">(</span>JavaMainWrapper.java:131<span class=\"token punctuation\">)</span>\n        at com.oracle.svm.core.code.IsolateEnterStub.JavaMainWrapper_run_5087f5482cc9a6abc971913ece43acb471d2631b<span class=\"token punctuation\">(</span>generated:0<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Native images don’t support dynamic class loading and this is understandable due to the nature of AOT compilation where all classes and bytecodes that are ever reachable needs to be known at compile time. To see the full list of native image limitation see <a href=\"https://github.com/oracle/graal/blob/master/substratevm/LIMITATIONS.md\">https://github.com/oracle/graal/blob/master/substratevm/LIMITATIONS.md</a>. But we still can take advantage of the suggested solution and postpone any errors resulting from dynamic class loading to runtime by using <code class=\"language-text\">--report-unsupported-elements-at-runtime</code> option. Let’s make the second attempt to build a native image</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"> native-image -cp <span class=\"token string\">\".:libs/*\"</span> -H:Name<span class=\"token operator\">=</span>json_path --report-unsupported-elements-at-runtime  Application</code></pre></div>\n<p> This time it worked and <code class=\"language-text\">json_path</code> executable was created. To make our life easier let’s register this executable to be accessible globally in our system</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">ln</span> -s /home/ubuntu/app/json_path /usr/local/bin/json_path</code></pre></div>\n<p>and let’s give it a try</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -s https://api.github.com/users/ajurasz <span class=\"token operator\">|</span> json_path <span class=\"token string\">\"$.created_at\"</span>\n2013-03-23T12:56:53Z</code></pre></div>\n<p>Works like a charm but what about some more complex expressions</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -s https://www.anapioficeandfire.com/api/books/1 <span class=\"token operator\">|</span> json_path <span class=\"token string\">\"$.characters.length()\"</span>\n\nException <span class=\"token keyword\">in</span> thread <span class=\"token string\">\"main\"</span> com.jayway.jsonpath.InvalidPathException: Function of name: length cannot be created\n        at com.jayway.jsonpath.internal.function.PathFunctionFactory.newFunction<span class=\"token punctuation\">(</span>PathFunctionFactory.java:75<span class=\"token punctuation\">)</span>\n        at com.jayway.jsonpath.internal.path.FunctionPathToken.evaluate<span class=\"token punctuation\">(</span>FunctionPathToken.java:38<span class=\"token punctuation\">)</span>\n        at com.jayway.jsonpath.internal.path.PathToken.handleObjectProperty<span class=\"token punctuation\">(</span>PathToken.java:81<span class=\"token punctuation\">)</span>\n        at com.jayway.jsonpath.internal.path.PropertyPathToken.evaluate<span class=\"token punctuation\">(</span>PropertyPathToken.java:79<span class=\"token punctuation\">)</span>\n        at com.jayway.jsonpath.internal.path.RootPathToken.evaluate<span class=\"token punctuation\">(</span>RootPathToken.java:62<span class=\"token punctuation\">)</span>\n        at com.jayway.jsonpath.internal.path.CompiledPath.evaluate<span class=\"token punctuation\">(</span>CompiledPath.java:53<span class=\"token punctuation\">)</span>\n        at com.jayway.jsonpath.internal.path.CompiledPath.evaluate<span class=\"token punctuation\">(</span>CompiledPath.java:61<span class=\"token punctuation\">)</span>\n        at com.jayway.jsonpath.JsonPath.read<span class=\"token punctuation\">(</span>JsonPath.java:181<span class=\"token punctuation\">)</span>\n        at com.jayway.jsonpath.JsonPath.read<span class=\"token punctuation\">(</span>JsonPath.java:345<span class=\"token punctuation\">)</span>\n        at com.jayway.jsonpath.JsonPath.read<span class=\"token punctuation\">(</span>JsonPath.java:329<span class=\"token punctuation\">)</span>\n        at Application.evaluate<span class=\"token punctuation\">(</span>Application.java:30<span class=\"token punctuation\">)</span>\n        at Application.main<span class=\"token punctuation\">(</span>Application.java:12<span class=\"token punctuation\">)</span>\nCaused by: java.lang.InstantiationException: Type <span class=\"token variable\"><span class=\"token variable\">`</span>com.jayway.jsonpath.internal.function.text.Length<span class=\"token variable\">`</span></span> can not be instantiated reflectively as it does not have a no-parameter constructor or the no-parameter constructor has not been added explicitly to the native image.\n        at java.lang.Class.newInstance<span class=\"token punctuation\">(</span>DynamicHub.java:740<span class=\"token punctuation\">)</span>\n        at com.jayway.jsonpath.internal.function.PathFunctionFactory.newFunction<span class=\"token punctuation\">(</span>PathFunctionFactory.java:73<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">..</span>. 11 <span class=\"token function\">more</span></code></pre></div>\n<p>So a new instance of <code class=\"language-text\">Length</code> type cannot be created. Quick sneak peek on failing part (<code class=\"language-text\">PathFunctionFactory.java:75</code>)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> PathFunction <span class=\"token function\">newFunction</span><span class=\"token punctuation\">(</span>String name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> InvalidPathException <span class=\"token punctuation\">{</span>\n    Class <span class=\"token class-name\">functionClazz</span> <span class=\"token operator\">=</span> FUNCTIONS<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>functionClazz <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidPathException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Function with name: \"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\" does not exist.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>PathFunction<span class=\"token punctuation\">)</span>functionClazz<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidPathException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Function of name: \"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\" cannot be created\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>That’s true, it looks like there is a set of predefined function which then are dynamically created. Fortunately, this can be fixed by introducing reflection configuration file. This file is used to inform <code class=\"language-text\">Substrate VM</code> about reflectively accessed program elements. To know more see <a href=\"https://github.com/oracle/graal/blob/master/substratevm/REFLECTION.md\">https://github.com/oracle/graal/blob/master/substratevm/REFLECTION.md</a>. To solve above issue we need to put one entry in <code class=\"language-text\">graal.json</code></p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"com.jayway.jsonpath.internal.function.text.Length\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"methods\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"&lt;init>\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"parameterTypes\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>After the rebuild of <code class=\"language-text\">json_path</code> executable, previous commands started to work</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -s https://www.anapioficeandfire.com/api/books/1 <span class=\"token operator\">|</span> json_path <span class=\"token string\">\"$.characters.length()\"</span>\n434\n        \n<span class=\"token function\">curl</span> -s https://www.anapioficeandfire.com/api/books <span class=\"token operator\">|</span> json_path <span class=\"token string\">\"$.[?(@.name == 'A Game of Thrones')].characters.length()\"</span>\n<span class=\"token punctuation\">[</span>434<span class=\"token punctuation\">]</span></code></pre></div>\n<h2>Conclusion</h2>\n<p>I see the big potential in these native images one of them is light and fast docker images <a href=\"https://blog.softwaremill.com/small-fast-docker-images-using-graalvms-native-image-99c0bc92e70b\">https://blog.softwaremill.com/small-fast-docker-images-using-graalvms-native-image-99c0bc92e70b</a> as pointed out by Adam Warski. What he also mention is that in Scala reflection is almost unused. For me compiling a very simple program to the native image was a few hours of research and at this point, I don’t see how I could do the same with small <code class=\"language-text\">Spring</code> application which in contrast to Scala ecosystem use reflection heavily.</p>","frontmatter":{"title":"Build a native image with GraalVM","date":"June 08, 2019"}}},"pageContext":{"slug":"/2019-06-08-build-native-imge-with-graalvm/","previous":{"fields":{"slug":"/2019-06-02-verify-your-json/"},"excerpt":"When you hear API and web client together you think  , at least I do. This is because it is still one of the most popular architectural…","frontmatter":{"title":"Verify your JSON","date":"June 2, 2019"}},"next":null}}